# telegram_bot.py
import logging
from telegram import Update, Bot, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.error import TelegramError

import db_handler
import config
import state_manager
from utils import format_timedelta
from datetime import datetime

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
BOT_INSTANCE = None
UPDATER_INSTANCE = None


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def start_bot():
    global BOT_INSTANCE, UPDATER_INSTANCE
    if not config.TELEGRAM_BOT_TOKEN:
        logging.warning("[TG_BOT] –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return

    try:
        BOT_INSTANCE = Bot(token=config.TELEGRAM_BOT_TOKEN)
        if not config.TELEGRAM_ADMIN_CHAT_ID:
            logging.error("[TG_BOT] TELEGRAM_ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
            return

        UPDATER_INSTANCE = Updater(bot=BOT_INSTANCE, use_context=True)
        dp = UPDATER_INSTANCE.dispatcher

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", start_command))
        dp.add_handler(CommandHandler("stats", stats_command))
        dp.add_handler(CommandHandler("rentals", rentals_command))
        dp.add_handler(CommandHandler("games", games_command))
        dp.add_handler(CommandHandler("enable", enable_bot_command))
        dp.add_handler(CommandHandler("disable", disable_bot_command))
        dp.add_handler(CommandHandler("status", status_command))
        dp.add_handler(CommandHandler("disable_lots", disable_all_lots_command))

        UPDATER_INSTANCE.start_polling()
        logging.info("[TG_BOT] Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

    except (TelegramError, ValueError) as e:
        logging.error(f"[TG_BOT] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞: {e}")


def stop_bot():
    if UPDATER_INSTANCE:
        UPDATER_INSTANCE.stop()
        logging.info("[TG_BOT] Telegram-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


def admin_only(func):
    def wrapped(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        if str(user_id) != str(config.TELEGRAM_ADMIN_CHAT_ID):
            logging.warning(f"[TG_BOT] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return func(update, context, *args, **kwargs)

    return wrapped


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@admin_only
def start_command(update: Update, context: CallbackContext):
    user_name = update.effective_user.first_name
    help_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:</b>\n"
        "/enable - ‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º.\n"
        "/disable - ‚õîÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º).\n"
        "/status - ‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.\n"
        "/disable_lots - üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –í–°–ï –ª–æ—Ç—ã –∞—Ä–µ–Ω–¥—ã.\n\n"
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
        "/rentals - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã.\n"
        "/games - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º."
    )
    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode.HTML >>>
    update.message.reply_text(help_text, parse_mode=ParseMode.HTML)


@admin_only
def enable_bot_command(update: Update, context: CallbackContext):
    state_manager.is_bot_enabled = True
    logging.info("[TG_BOT] –ë–æ—Ç –í–ö–õ–Æ–ß–ï–ù –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    update.message.reply_text("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")


@admin_only
def disable_bot_command(update: Update, context: CallbackContext):
    state_manager.is_bot_enabled = False
    logging.warning("[TG_BOT] –ë–æ—Ç –í–´–ö–õ–Æ–ß–ï–ù –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º.")
    update.message.reply_text("‚õîÔ∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è FunPay –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")


@admin_only
def status_command(update: Update, context: CallbackContext):
    if state_manager.is_bot_enabled:
        update.message.reply_text("‚úÖ –ë–æ—Ç —Å–µ–π—á–∞—Å –≤–∫–ª—é—á–µ–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º).")
    else:
        update.message.reply_text("‚õîÔ∏è –ë–æ—Ç —Å–µ–π—á–∞—Å –≤—ã–∫–ª—é—á–µ–Ω (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º).")


@admin_only
def disable_all_lots_command(update: Update, context: CallbackContext):
    state_manager.deactivate_all_lots_requested = True
    logging.info("[TG_BOT] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤.")
    update.message.reply_text("‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û—Ç–∫–ª—é—á–∞—é –≤—Å–µ –ª–æ—Ç—ã –∞—Ä–µ–Ω–¥—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")


@admin_only
def stats_command(update: Update, context: CallbackContext):
    try:
        total_accounts = db_handler.db_query("SELECT COUNT(*) FROM accounts", fetch="one")[0]
        rented_accounts = db_handler.db_query("SELECT COUNT(*) FROM accounts WHERE rented_by IS NOT NULL", fetch="one")[
            0]
        free_accounts = total_accounts - rented_accounts
        total_rentals = db_handler.db_query("SELECT COUNT(*) FROM rentals WHERE is_history = 0", fetch="one")[0]

        # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ >>>
        stats_text = (
            "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{total_accounts}</b>\n"
            f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ: <b>{free_accounts}</b>\n"
            f"‚ùå –ó–∞–Ω—è—Ç–æ: <b>{rented_accounts}</b>\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: <b>{total_rentals}</b>"
        )
        update.message.reply_text(stats_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"[TG_BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")


@admin_only
def rentals_command(update: Update, context: CallbackContext):
    try:
        rentals = db_handler.db_query("""
                                      SELECT r.client_name, g.name, r.end_time, a.login
                                      FROM rentals r
                                               JOIN accounts a ON r.account_id = a.id
                                               JOIN games g ON a.game_id = g.id
                                      WHERE r.is_history = 0
                                      ORDER BY r.end_time ASC
                                      """, fetch="all")

        if not rentals:
            update.message.reply_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
            return

        # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ >>>
        message = "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥:</b>\n\n"
        now = datetime.now()
        for client, game, end_time_iso, login in rentals:
            end_time = datetime.fromisoformat(end_time_iso)
            remaining = end_time - now
            message += (
                f"üë§ <i>{client}</i> ({game})\n"
                f"   –ê–∫–∫–∞—É–Ω—Ç: <code>{login}</code>\n"
                f"   –û—Å—Ç–∞–ª–æ—Å—å: <b>{format_timedelta(remaining)}</b>\n\n"
            )
        update.message.reply_text(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"[TG_BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥.")


@admin_only
def games_command(update: Update, context: CallbackContext):
    try:
        stats = db_handler.get_games_stats()
        if not stats:
            update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–≥—Ä.")
            return

        # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ >>>
        message = "üéÆ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º (–í—Å–µ–≥–æ / –°–≤–æ–±–æ–¥–Ω–æ):</b>\n\n"
        for name, total, free in stats:
            message += f"‚Ä¢ <i>{name}</i>:  <code>{total} / {free}</code>\n"
        update.message.reply_text(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"[TG_BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–∞–º: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º.")