# telegram_bot.py
from telegram import Update, Bot, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext, JobQueue
from telegram.error import TelegramError
from queue import Queue
import logging
import threading
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import bot_handler
import db_handler
import config
import state_manager
from utils import format_timedelta
from datetime import datetime
import shared # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
BOT_INSTANCE: Bot = None
UPDATER_INSTANCE: Updater = None
TG_SEND_QUEUE: Queue = None

def send_telegram_notification(message: str):
    if TG_SEND_QUEUE:
        TG_SEND_QUEUE.put({'type': 'info', 'text': message})

def send_telegram_alert(message: str):
    if TG_SEND_QUEUE:
        TG_SEND_QUEUE.put({'type': 'alert', 'text': message})

def _send_message_from_queue(context: CallbackContext):
    if not TG_SEND_QUEUE.empty():
        item = TG_SEND_QUEUE.get_nowait()
        text = item.get('text', '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        if item.get('type') == 'alert':
            text = f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï</b> üö®\n\n{text}"
        try:
            context.bot.send_message(
                chat_id=config.TELEGRAM_ADMIN_CHAT_ID,
                text=text,
                parse_mode=ParseMode.HTML
            )
        except TelegramError as e:
            logging.error(f"[TG_BOT_SENDER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        finally:
            TG_SEND_QUEUE.task_done()


def admin_only(func):
    def wrapped(update: Update, context: CallbackContext, *args, **kwargs):
        if str(update.effective_user.id) != str(config.TELEGRAM_ADMIN_CHAT_ID):
            update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return func(update, context, *args, **kwargs)
    return wrapped

# --- –ö–æ–º–∞–Ω–¥—ã ---

@admin_only
def start_command(update: Update, context: CallbackContext):
    user_name = update.effective_user.first_name
    help_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:</b>\n"
        "/enable - ‚úÖ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ (–∞–≤—Ç–æ—Ä–µ–∂–∏–º).\n"
        "/disable - ‚õîÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º).\n"
        "/sync_lots - üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤.\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏:</b>\n"
        "/enable_lots - ‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É –≤–∫–ª—é—á–∞—Ç—å –ª–æ—Ç—ã.\n"
        "/disable_lots - üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –±–æ—Ç—É –≤–∫–ª—é—á–∞—Ç—å –ª–æ—Ç—ã—ã.\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "/status - ‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.\n"
        "/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
        "/rentals - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã.\n"
        "/games - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º."
    )
    update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã disable_lots >>>
@admin_only
def disable_lots_command(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–µ—â–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ª–æ—Ç–æ–≤ –ò –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ."""
    state_manager.are_lots_enabled = False
    state_manager.force_deactivate_all_lots_requested = True # <-- –í–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥
    logging.warning("[TG_BOT] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤.")
    update.message.reply_text("üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ. –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@admin_only
def enable_bot_command(update: Update, context: CallbackContext):
    state_manager.is_bot_enabled = True
    update.message.reply_text("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω.")

@admin_only
def disable_bot_command(update: Update, context: CallbackContext):
    state_manager.is_bot_enabled = False
    update.message.reply_text("‚õîÔ∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")

@admin_only
def status_command(update: Update, context: CallbackContext):
    bot_status = "‚úÖ –í–∫–ª—é—á–µ–Ω (–∞–≤—Ç–æ)" if state_manager.is_bot_enabled else "‚õîÔ∏è –í—ã–∫–ª—é—á–µ–Ω (—Ä—É—á–Ω–æ–π)"
    lot_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if state_manager.are_lots_enabled else "üö´ –û—Ç–∫–ª—é—á–µ–Ω–æ"
    update.message.reply_text(f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: {bot_status}\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏: {lot_status}", parse_mode=ParseMode.HTML)

@admin_only
def enable_lots_command(update: Update, context: CallbackContext):
    state_manager.are_lots_enabled = True
    update.message.reply_text("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ –≤–∫–ª—é—á–µ–Ω–æ.")

@admin_only
def stats_command(update: Update, context: CallbackContext):
    try:
        total = db_handler.db_query("SELECT COUNT(*) FROM accounts", fetch="one")[0]
        rented = db_handler.db_query("SELECT COUNT(*) FROM accounts WHERE rented_by IS NOT NULL", fetch="one")[0]
        update.message.reply_text(f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—Å–µ–≥–æ: <b>{total}</b>\n–°–≤–æ–±–æ–¥–Ω–æ: <b>{total - rented}</b>\n–ó–∞–Ω—è—Ç–æ: <b>{rented}</b>", parse_mode=ParseMode.HTML)
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_only
def rentals_command(update: Update, context: CallbackContext):
    try:
        rentals = db_handler.db_query("SELECT r.client_name, g.name, r.end_time, a.login FROM rentals r JOIN accounts a ON r.account_id = a.id JOIN games g ON a.game_id = g.id WHERE r.is_history = 0 ORDER BY r.end_time ASC", fetch="all")
        if not rentals: return update.message.reply_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç.")
        message = "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥:</b>\n\n"
        for client, game, end_time_iso, login in rentals:
            remaining = datetime.fromisoformat(end_time_iso) - datetime.now()
            message += f"üë§ <i>{client}</i> ({game})\n   –ê–∫–∫–∞—É–Ω—Ç: <code>{login}</code>\n   –û—Å—Ç–∞–ª–æ—Å—å: <b>{format_timedelta(remaining)}</b>\n\n"
        update.message.reply_text(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_only
def games_command(update: Update, context: CallbackContext):
    try:
        stats = db_handler.get_games_stats()
        if not stats: return update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–≥—Ä.")
        message = "üéÆ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º (–í—Å–µ–≥–æ / –°–≤–æ–±–æ–¥–Ω–æ):</b>\n\n"
        for name, total, free in stats:
            message += f"‚Ä¢ <i>{name}</i>:  <code>{total} / {free}</code>\n"
        update.message.reply_text(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@admin_only
def sync_lots_command(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ—Ç–æ–≤ —Å FunPay.
    """
    if not shared.funpay_account:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É FunPay.")
        return

    update.message.reply_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=bot_handler.sync_games_with_funpay_offers, args=(shared.funpay_account,))
    thread.start()


def main(funpay_account):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    updater = Updater(config.TELEGRAM_BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ FunPay –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–º–∞–Ω–¥
    dispatcher.bot_data['funpay_account'] = funpay_account

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("status", status_command))
    dispatcher.add_handler(CommandHandler("enable", enable_bot_command))
    dispatcher.add_handler(CommandHandler("disable", disable_bot_command))
    dispatcher.add_handler(CommandHandler("enable_lots", enable_lots_command))
    dispatcher.add_handler(CommandHandler("disable_lots", disable_lots_command))

    # –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –ö–û–ú–ê–ù–î–£
    dispatcher.add_handler(CommandHandler("sync_lots", sync_lots_command))

    logging.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    updater.start_polling()
    updater.idle()

def start_telegram_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    global UPDATER_INSTANCE, TG_SEND_QUEUE
    if not config.TELEGRAM_BOT_TOKEN:
        logging.warning("[TG_BOT] –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return

    UPDATER_INSTANCE = Updater(config.TELEGRAM_BOT_TOKEN, use_context=True)
    dp = UPDATER_INSTANCE.dispatcher

    TG_SEND_QUEUE = Queue()
    job_queue = UPDATER_INSTANCE.job_queue
    job_queue.run_repeating(_send_message_from_queue, interval=1, first=0)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start_command))
    dp.add_handler(CommandHandler("status", status_command))
    dp.add_handler(CommandHandler("enable", enable_bot_command))
    dp.add_handler(CommandHandler("disable", disable_bot_command))
    dp.add_handler(CommandHandler("enable_lots", enable_lots_command))
    dp.add_handler(CommandHandler("disable_lots", disable_lots_command))
    dp.add_handler(CommandHandler("sync_lots", sync_lots_command))
    dp.add_handler(CommandHandler("stats", stats_command))
    dp.add_handler(CommandHandler("rentals", rentals_command))
    dp.add_handler(CommandHandler("games", games_command))

    UPDATER_INSTANCE.start_polling()
    logging.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")


def stop_telegram_bot():
    if UPDATER_INSTANCE:
        UPDATER_INSTANCE.stop()