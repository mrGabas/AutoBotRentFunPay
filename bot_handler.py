# bot_handler.py
import logging
import re
import time
import threading
from datetime import datetime
import pytz

from FunPayAPI.account import Account
from FunPayAPI.updater.runner import Runner
from FunPayAPI.common.enums import EventTypes, SubCategoryTypes
from config import RENTAL_KEYWORDS, USE_EXPIRATION_GRACE_PERIOD, EXPIRATION_GRACE_PERIOD_MINUTES
import db_handler
from telegram_bot import send_telegram_notification, send_telegram_alert
import localization
from utils import format_timedelta
import state_manager

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä
game_check_index = 0

def sync_games_with_funpay_offers(account: Account):
    send_telegram_notification("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ª–æ—Ç–æ–≤ —Å FunPay...")
    logging.info("[SYNC] –ó–∞–ø—É—Å–∫ –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä —Å –ª–æ—Ç–∞–º–∏ FunPay.")
    try:
        db_games = db_handler.db_query("SELECT id, name, funpay_offer_ids FROM games", fetch="all")
        if not db_games:
            send_telegram_notification("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–≥—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
            return

        all_offers = account.get_user(account.id).get_lots()
        if not all_offers:
            send_telegram_notification("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ —Å FunPay.")
            return

        all_known_ids = set()
        for _, _, ids_str in db_games:
            if ids_str:
                all_known_ids.update(ids_str.split(','))

        logging.info(f"[SYNC] –ù–∞–π–¥–µ–Ω–æ {len(all_offers)} –ª–æ—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ. –ò—â—É —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ...")

        newly_found_count = 0
        for game_id, game_name, _ in db_games:
            new_ids_for_this_game = []
            for offer in all_offers:
                if str(offer.id) in all_known_ids: continue

                offer_text = (offer.description or "").lower()
                if offer.subcategory and offer.subcategory.category:
                    offer_text += " " + offer.subcategory.category.name.lower()

                if game_name.lower() in offer_text and any(kw in offer_text for kw in RENTAL_KEYWORDS):
                    new_ids_for_this_game.append(str(offer.id))

            if new_ids_for_this_game:
                db_handler.add_offer_id_to_game(game_id, new_ids_for_this_game)
                newly_found_count += len(new_ids_for_this_game)

        send_telegram_notification(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ {newly_found_count} –Ω–æ–≤—ã—Ö ID.")

        logging.info("[SYNC_CHECK] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤.")
        for game_id, _, _ in db_games:
            update_offer_status_for_game(account, game_id)
            time.sleep(2)
        send_telegram_notification("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–æ—Ç–æ–≤ –Ω–∞ FunPay –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

    except Exception as e:
        logging.exception(f"[SYNC] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        send_telegram_alert(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n`{e}`")

def update_offer_status_for_game(account: Account, game_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã, —É—á–∏—Ç—ã–≤–∞—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏."""
    if not game_id: return
    try:
        game_data = db_handler.db_query("""
            SELECT g.funpay_offer_ids, 
                   (SELECT COUNT(*) FROM accounts a WHERE a.game_id = g.id AND a.rented_by IS NULL)
            FROM games g WHERE g.id = ?
        """, (game_id,), fetch="one")
        if not (game_data and game_data[0]): return

        offer_ids_str, free_accounts = game_data
        offer_ids = {int(i.strip()) for i in offer_ids_str.split(',') if i.strip().isdigit()}

        for offer_id in offer_ids:
            try:
                fields = account.get_lot_fields(offer_id)
                is_active = fields.active

                # –õ–æ–≥–∏–∫–∞ –ê–ö–¢–ò–í–ê–¶–ò–ò –ª–æ—Ç–∞
                if free_accounts > 0 and not is_active:
                    # –í–∫–ª—é—á–∞–µ–º –ª–æ—Ç –¢–û–õ–¨–ö–û –ï–°–õ–ò —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ
                    if state_manager.are_lots_enabled:
                        logging.info(f"[LOT_MANAGER] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–∞ {offer_id}.")
                        fields.active = True
                        account.save_lot(fields)
                        send_telegram_notification(f"‚úÖ –õ–æ—Ç {offer_id} –ê–ö–¢–ò–í–ò–†–û–í–ê–ù.")
                        time.sleep(3)
                    else:
                        logging.info(f"[LOT_MANAGER] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–∞ {offer_id} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ).")

                # –õ–æ–≥–∏–∫–∞ –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò –ª–æ—Ç–∞
                elif free_accounts == 0 and is_active:
                    logging.info(f"[LOT_MANAGER] –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–∞ {offer_id} (–Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤).")
                    fields.active = False
                    account.save_lot(fields)
                    send_telegram_notification(f"‚õîÔ∏è –õ–æ—Ç {offer_id} –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù.")
                    time.sleep(3)
            except Exception as e:
                logging.error(f"[LOT_MANAGER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ {offer_id}: {e}")
    except Exception as e:
        logging.exception(f"[LOT_MANAGER] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–æ—Ç–æ–≤ –¥–ª—è game_id {game_id}.")

def _force_deactivate_all_lots(account: Account):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ª–æ—Ç—ã –∏–∑ –ë–î –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏—Ö.
    """
    logging.warning("[FORCE_DEACTIVATE] –ó–ê–ü–£–°–ö –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò –í–°–ï–• –õ–û–¢–û–í.")
    all_offer_ids = set()
    try:
        games_with_ids = db_handler.db_query("SELECT funpay_offer_ids FROM games WHERE funpay_offer_ids IS NOT NULL",
                                             fetch="all")
        for (ids_str,) in games_with_ids:
            if ids_str:
                all_offer_ids.update([int(i.strip()) for i in ids_str.split(',') if i.strip().isdigit()])

        if not all_offer_ids:
            send_telegram_notification("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            return

        deactivated_count = 0
        for offer_id in all_offer_ids:
            try:
                fields = account.get_lot_fields(offer_id)
                if fields.active:
                    fields.active = False
                    account.save_lot(fields)
                    logging.info(f"[FORCE_DEACTIVATE] –õ–æ—Ç {offer_id} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                    deactivated_count += 1
                    time.sleep(3)
            except Exception as e:
                logging.error(f"[FORCE_DEACTIVATE] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ—Ç {offer_id}: {e}")

        send_telegram_notification(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–∫–ª—é—á–µ–Ω–æ: {deactivated_count} –ª–æ—Ç(–æ–≤).")

    except Exception as e:
        send_telegram_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–æ—Ç–æ–≤: {e}")

def expired_rentals_checker(account: Account):
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤."""
    logging.info("[SYNC_CHECKER] –ó–∞–ø—É—â–µ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–µ—Ä—â–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤.")
    game_ids = [g[0] for g in db_handler.db_query("SELECT id FROM games", fetch="all")]
    game_check_index = 0
    while True:
        try:
            if state_manager.force_deactivate_all_lots_requested:
                _force_deactivate_all_lots(account)
                state_manager.force_deactivate_all_lots_requested = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω–∞ –æ—à–∏–±–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ state_manager.deactivate_all_lots_requested >>>
            if not state_manager.is_bot_enabled:
                time.sleep(30)
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥
            freed_game_ids = db_handler.check_and_process_expired_rentals()
            for game_id in freed_game_ids:
                update_offer_status_for_game(account, game_id)

            # –ü–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–æ–≤–∞ —Ä—É—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if game_ids:
                if game_check_index >= len(game_ids):
                    game_check_index = 0

                current_game_id = game_ids[game_check_index]
                if current_game_id not in freed_game_ids:
                    update_offer_status_for_game(account, current_game_id)

                game_check_index += 1
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤.")
        time.sleep(60)

def expired_rentals_checker(account: Account):
    """
    –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 10-–º–∏–Ω—É—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∞—Ä–µ–Ω–¥—ã.
    3. –ü—Ä–∏–º–µ–Ω—è–µ—Ç 10-–º–∏–Ω—É—Ç–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ª–æ—Ç–∞.
    4. –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ—Ç–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ.
    5. –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ –æ–¥–Ω–æ–π –∏–≥—Ä–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–æ—Ç–æ–≤.
    """
    logging.info("[CHECKER] –ó–∞–ø—É—â–µ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–µ—Ä—â–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤.")
    game_ids = [g[0] for g in db_handler.db_query("SELECT id FROM games", fetch="all")]
    game_check_index = 0

    while True:
        try:
            # 1. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ—Ç–æ–≤
            if state_manager.force_deactivate_all_lots_requested:
                _force_deactivate_all_lots(account)
                state_manager.force_deactivate_all_lots_requested = False

            if not state_manager.is_bot_enabled:
                time.sleep(30)
                continue

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 10-–º–∏–Ω—É—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminders_to_send = db_handler.get_rentals_for_reminder()
            if reminders_to_send:
                logging.info(f"[CHECKER_REMINDER] –ù–∞–π–¥–µ–Ω–æ {len(reminders_to_send)} –∞—Ä–µ–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
                for rental_id, client_name, chat_id in reminders_to_send:
                    lang = 'ru'
                    reminder_text = localization.get_text('RENTAL_ENDING_SOON', lang)
                    try:
                        account.send_message(chat_id, reminder_text, chat_name=client_name)
                        db_handler.mark_rental_as_reminded(rental_id)
                        logging.info(
                            f"[CHECKER_REMINDER] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∞—Ä–µ–Ω–¥—ã {rental_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")
                    except Exception as e:
                        logging.error(
                            f"[CHECKER_REMINDER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∞—Ä–µ–Ω–¥—ã {rental_id}: {e}")
                    time.sleep(2)

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥
            freed_game_ids = db_handler.check_and_process_expired_rentals()
            if freed_game_ids:
                logging.info(f"[CHECKER_EXPIRED] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–≥—Ä (game_ids): {freed_game_ids}.")
                for game_id in freed_game_ids:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                    if USE_EXPIRATION_GRACE_PERIOD:
                        delay = EXPIRATION_GRACE_PERIOD_MINUTES * 60
                        logging.info(
                            f"[CHECKER_GRACE] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞—É–∑–∞ {EXPIRATION_GRACE_PERIOD_MINUTES} –º–∏–Ω. –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ª–æ—Ç–æ–≤ –¥–ª—è game_id {game_id}.")
                        threading.Timer(delay, update_offer_status_for_game, args=[account, game_id]).start()
                    else:
                        # –ï—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
                        update_offer_status_for_game(account, game_id)

            # 4. –ü–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–æ–≤–∞ —Ä—É—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if game_ids:
                if game_check_index >= len(game_ids):
                    game_check_index = 0

                current_game_id = game_ids[game_check_index]
                if current_game_id not in freed_game_ids:
                    update_offer_status_for_game(account, current_game_id)

                game_check_index += 1
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤.")
        time.sleep(60)


def funpay_bot_listener(account, _):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π FunPay.
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ –∑–∞–∫–∞–∑—ã —Å ID –ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.
    """
    runner = Runner(account)
    logging.info("FunPay –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω –≤ –°–¢–†–û–ì–û–ú —Ä–µ–∂–∏–º–µ.")
    while True:
        try:
            for event in runner.listen():
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ
                if not state_manager.is_bot_enabled:
                    if event.type in [EventTypes.NEW_ORDER, EventTypes.NEW_MESSAGE]:
                        logging.info(f"[BOT_DISABLED] –°–æ–±—ã—Ç–∏–µ {event.type} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
                    continue  # –ï—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è

                # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                if event.type == EventTypes.NEW_ORDER:
                    order = event.order
                    logging.info(f"--- –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id} –æ—Ç {order.buyer_username} ---")

                    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∑–∞–∫–∞–∑–∞ ID –ª–æ—Ç–∞
                    if not hasattr(order, 'offer') or not hasattr(order.offer, 'id'):
                        logging.warning(f"[{order.id}] –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ª–æ—Ç–∞.")
                        continue

                    offer_id = str(order.offer.id)
                    logging.info(f"[{order.id}] ID –ª–æ—Ç–∞: {offer_id}. –ü—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–∞–∑–µ...")

                    # 4. –ò—â–µ–º –∏–≥—Ä—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω —ç—Ç–æ—Ç ID –ª–æ—Ç–∞
                    game_info = db_handler.find_game_by_offer_id(offer_id)

                    if not game_info:
                        logging.warning(
                            f"[{order.id}] –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: ID –ª–æ—Ç–∞ {offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ —É –æ–¥–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞–∑–µ.")
                        continue

                    game_id, game_name = game_info
                    logging.info(f"[{order.id}] ID –ª–æ—Ç–∞ {offer_id} –Ω–∞–π–¥–µ–Ω. –ò–≥—Ä–∞: '{game_name}'. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                    send_telegram_notification(f"–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑ #{order.id} –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –ª–æ—Ç—É. –ò–≥—Ä–∞: {game_name}.")

                    try:
                        # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã
                        order_text = order.description.lower()
                        match = re.search(r'(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|—á|–¥|–¥–Ω–µ–π|–¥–µ–Ω—å|day|days)', order_text)
                        if not match:
                            logging.error(f"[{order.id}] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã.")
                            send_telegram_alert(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –°–†–û–ö –¥–ª—è –∑–∞–∫–∞–∑–∞ `#{order.id}`.")
                            continue

                        time_value = int(match.group(1))
                        time_unit = match.group(2)
                        total_minutes = (time_value * 1440) if time_unit in ['–¥', '–¥–Ω–µ–π', '–¥–µ–Ω—å', 'day', 'days'] else (
                                    time_value * 60)
                        if order.amount > 1:
                            total_minutes *= order.amount
                        logging.info(f"[{order.id}] –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {total_minutes} –º–∏–Ω—É—Ç.")

                        # 6. –í—ã–¥–∞—á–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                        rental_data = db_handler.rent_account(game_name, order.buyer_username, total_minutes,
                                                              order.chat_id)

                        if rental_data:
                            login, password, _ = rental_data
                            logging.info(f"[{order.id}] –£–°–ü–ï–•: –ê–∫–∫–∞—É–Ω—Ç {login} –≤—ã–¥–∞–Ω.")
                            lang = 'ru'
                            response_text = localization.get_text('RENTAL_SUCCESS', lang).format(
                                game_name=game_name,
                                login=login,
                                password=password,
                                total_hours=round(total_minutes / 60, 1)
                            )
                            account.send_message(order.chat_id, response_text, chat_name=order.buyer_username)
                            # –°—Ä–∞–∑—É –∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
                            update_offer_status_for_game(account, game_id)
                        else:
                            logging.warning(f"[{order.id}] –û–®–ò–ë–ö–ê: –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è '{game_name}'.")
                            lang = 'ru'
                            response_text = localization.get_text('NO_ACCOUNTS_AVAILABLE_USER', lang)
                            account.send_message(order.chat_id, response_text, chat_name=order.buyer_username)
                            send_telegram_alert(f"–ù–ï–¢ –°–í–û–ë–û–î–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í –¥–ª—è '{game_name}' –ø–æ –∑–∞–∫–∞–∑—É `#{order.id}`.")

                    except Exception as e:
                        logging.exception(f"[{order.id}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
                        send_telegram_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ #{order.id}:\n`{e}`")

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ —á–∞—Ç–∞
                elif event.type == EventTypes.NEW_MESSAGE:
                    message = event.message
                    if message.author_id == account.id or not message.text:
                        continue

                    logging.info(f"[BOT] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç '{message.author}': {message.text}")
                    lang = 'ru'  # –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
                    cmd_text = message.text.lower().strip()

                    # –ö–æ–º–∞–Ω–¥–∞ !–ø–æ–º–æ—â—å
                    if cmd_text == '!–ø–æ–º–æ—â—å' or cmd_text == '!help':
                        logging.info(f"[BOT] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !–ø–æ–º–æ—â—å –æ—Ç {message.author}")
                        help_text = localization.get_text('HELP_MESSAGE', lang)
                        account.send_message(message.chat_id, help_text, chat_name=message.author)

                    # –ö–æ–º–∞–Ω–¥–∞ !–∏–≥—Ä—ã
                    elif cmd_text == '!–∏–≥—Ä—ã' or cmd_text == '!games':
                        logging.info(f"[BOT] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !–∏–≥—Ä—ã –æ—Ç {message.author}")
                        stats = db_handler.get_games_stats()
                        if not stats:
                            response = localization.get_text('NO_GAMES_AVAILABLE', lang)
                        else:
                            response = localization.get_text('GAMES_HEADER', lang) + "\n"
                            response += "\n".join([f"‚Ä¢ {name}: {total} / {free}" for name, total, free in stats])
                        account.send_message(message.chat_id, response, chat_name=message.author)

                    # –ö–æ–º–∞–Ω–¥–∞ !–≤—Ä–µ–º—è
                    elif cmd_text == '!–≤—Ä–µ–º—è' or cmd_text == '!time':
                        logging.info(f"[BOT] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !–≤—Ä–µ–º—è –æ—Ç {message.author}")
                        rental_info = db_handler.get_user_rental_info(message.author)
                        if not rental_info:
                            response = localization.get_text('NO_ACTIVE_RENTALS', lang)
                        else:
                            end_time_str = rental_info[0]
                            end_time = datetime.fromisoformat(end_time_str)
                            now = datetime.now()
                            if end_time < now:
                                response = localization.get_text('RENTAL_EXPIRED', lang)
                            else:
                                remaining = end_time - now
                                msk_tz = pytz.timezone('Europe/Moscow')
                                utc_tz = pytz.utc
                                end_time_msk = end_time.astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
                                end_time_utc = end_time.astimezone(utc_tz).strftime('%Y-%m-%d %H:%M:%S')
                                response = localization.get_text('RENTAL_INFO', lang).format(
                                    remaining_time=format_timedelta(remaining),
                                    end_time_msk=end_time_msk,
                                    end_time_utc=end_time_utc
                                )
                        account.send_message(message.chat_id, response, chat_name=message.author)

                    # –ö–æ–º–∞–Ω–¥–∞ !–ø—Ä–æ–¥–ª–∏—Ç—å
                    elif cmd_text.startswith('!–ø—Ä–æ–¥–ª–∏—Ç—å') or cmd_text.startswith('!extend'):
                        logging.info(f"[BOT] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !–ø—Ä–æ–¥–ª–∏—Ç—å –æ—Ç {message.author}")
                        parts = cmd_text.split()
                        if len(parts) < 2 or not parts[1].isdigit():
                            response = localization.get_text('INVALID_EXTEND_FORMAT', lang)
                        else:
                            hours_to_add = int(parts[1])
                            new_end_time = db_handler.extend_user_rental(message.author, hours_to_add)
                            if not new_end_time:
                                response = localization.get_text('NO_RENTAL_TO_EXTEND', lang)
                            else:
                                msk_tz = pytz.timezone('Europe/Moscow')
                                utc_tz = pytz.utc
                                end_time_msk = new_end_time.astimezone(msk_tz).strftime('%Y-%m-%d %H:%M:%S')
                                end_time_utc = new_end_time.astimezone(utc_tz).strftime('%Y-%m-%d %H:%M:%S')
                                response = localization.get_text('EXTEND_SUCCESS', lang).format(
                                    hours=hours_to_add,
                                    end_time_msk=end_time_msk,
                                    end_time_utc=end_time_utc
                                )
                        account.send_message(message.chat_id, response, chat_name=message.author)

        except Exception as e:
            logging.exception(f"[BOT_LISTENER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ.")
            send_telegram_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ FunPay Listener:\n\n{e}")
        time.sleep(15)